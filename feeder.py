"""DER Integration 50 Client household + 1 public charging station simulation - Physics informed - Two Global-3 Phase feeder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A9CdeFo-ivgolt3OMqiw8xAdK5OqUWrf
"""


"""
IEEE 34‑Bus unbalanced feeder – Ready for runpp_3ph
Converted by ChatGPT on 2025‑05‑15

This script rebuilds the classic IEEE‑34 feeder as a *single‑node‑per‑bus*
model using pandapower ≥3.0 and provides the zero‑sequence data that
`pandapower.pf.runpp_3ph` requires.

Key changes vs. the Colab notebook version:
  • One `pp.bus` per physical node (no A/B/C sub‑buses)
  • Loads, capacitors → `create_asymmetric_load` / `create_asymmetric_sgen`
  • Lines carry R/X/C for positive and zero sequence
  • Transformer includes vk0/vkr0/mag0 data and is Dyn‑earthed
  • Slack (ext_grid) annotated with short‑circuit values
"""


import pandapower as pp
from pandapower.create import (
    create_asymmetric_load,
    create_asymmetric_sgen,
    create_transformer_from_parameters,
)
import numpy as np

FT2KM = 0.0003048   # feet → km

# ---------------------------------------------------------------------------
# 1) Conductor library (per km).  Values adapted from Kersting's book.
#    If you have better field data, edit here.
# ---------------------------------------------------------------------------
# code : (r_pos, x_pos, c_pos, r_zero, x_zero, c_zero)  [ohm/km, …, nF/km]
CNDUCT = {
    300: (0.827, 0.326, 8.6,   2.481, 1.104, 5.0),
    301: (1.195, 0.438, 8.6,   3.585, 1.322, 5.0),
    302: (1.733, 0.460, 9.8,   5.199, 1.391, 5.5),
    303: (1.733, 0.460, 11.0,  5.199, 1.391, 6.2),
    304: (1.189, 0.445, 12.1,  3.567, 1.335, 6.8),
}

# ---------------------------------------------------------------------------
# 2) Feeder topology data (unchanged from original notebook)
# ---------------------------------------------------------------------------
# Lines: (from_bus, to_bus, length_ft, code)
LINES = [
    (800,802,2580,300), (802,806,1730,300), (806,808,32230,300),
    (808,810,5804,303), (808,812,37500,300), (812,814,29730,300),
    (814,850,10,301),   (816,818,1710,302), (816,824,10210,301),
    (818,820,48150,302),(820,822,13740,302),(824,826,3030,303),
    (824,828,840,301),  (828,830,20440,301),(830,854,520,301),
    (832,858,4900,301), (834,860,2020,301),(834,842,280,301),
    (836,840,860,301),  (836,862,280,301),(842,844,1350,301),
    (844,846,3640,301), (846,848,530,301),(850,816,310,301),
    (852,832,10,301),   (854,856,23330,303),(854,852,36830,301),
    (858,864,1620,302), (858,834,5830,301),(860,836,2680,301),
    (862,838,4860,304)
]
# remove the 4.16 kV lateral (not modelled here)
LINES = [seg for seg in LINES if seg[0] not in (832,888,890)]

# Capacitor banks: (bus, total_kvar)
CAPS = [(844,300),(848,450)]

# Spot-load table  (bus, pA,qA,pB,qB,pC,qC)  [kW/kvar]
SPOT = [
    (860,20,16,20,16,20,16),
    (840, 9, 7, 9, 7, 9, 7),
    (844,135,105,135,105,135,105),
    (848,20,16,20,16,20,16),
    (890,150,75,150,75,150,75),
    (830,10, 5,10, 5,25,10),
]

DIST = [
    (802,  0,30,25, 0,15,14),
    (808,  0,16, 0, 0, 8, 0),
    (818, 34, 0, 0,17, 0, 0),
    (820,135, 0, 0,70, 0, 0),
    (816, 0, 5, 0, 0, 2, 0),
    (824, 0,40, 0, 0,20, 0),
    (824, 0, 0, 4, 0, 0, 2),
    (828, 7, 0, 0, 3, 0, 0),
    (854, 0, 4, 0, 0, 2, 0),
    (832, 7, 2, 6, 3, 1, 3),
    (858, 2, 0, 0, 1, 0, 0),
    (858, 4,15,13, 2, 8, 7),
    (834,16,20,110,8,10,55),
    (860,30,10,42,15, 6,22),
    (836,18,22, 0, 9,11, 0),
    (862, 0,28, 0, 0,14, 0),
    (842, 9, 0, 0, 5, 0, 0),
    (844, 0,25,20, 0,12,11),
    (846, 0,23, 0, 0,11, 0),
]

# Transformer: (hv_bus, lv_bus, sn_mva, vn_hv_kv, vn_lv_kv)
TX = [(800,800,6,69,24.9)]

# ––– build empty net –––
net = pp.create_empty_network(sn_mva=10.0, f_hz=60.0)

# ––– nodes –––
_bus = {}
def node(num):
    if num not in _bus:
        _bus[num] = pp.create_bus(net, vn_kv=24.9, name=f"BUS{num}")
    return _bus[num]

# ––– HV slack node + ext_grid with full SC data –––
SRC = pp.create_bus(net, vn_kv=69.0, name="BUS800")
pp.create_ext_grid(
    net, SRC, vm_pu=1.0, name="SOURCE",
    s_sc_max_mva=2000, rx_max=0.1,
    r0x0_max=1.0, x0x_max=1.0
)
node(800)
lv_idx = net.bus.index[(net.bus.vn_kv == 24.9) & (net.bus.name == "BUS800")][0]
if not any(net.ext_grid.bus.apply(lambda b: net.bus.at[b,"vn_kv"]==24.9)):
    # clone HV sc‐data if you’ve set it there, or just set defaults
    pp.create_ext_grid(net, lv_idx, vm_pu=1.0,
                       s_sc_max_mva=2000, rx_max=0.1,
                       r0x0_max=1.0, x0x_max=1.0,
                       name="LV_SLACK_24kV")
    ext = net.ext_grid[net.ext_grid.name=="LV_SLACK_24kV"]
    ext["s_sc_min_mva"] = ext["s_sc_max_mva"]
    ext["rx_min"]      = ext["rx_max"]
    ext["r0x0_min"]    = ext["r0x0_max"]
    ext["x0x_min"]     = ext["x0x_max"]

# ––– lines with zero-seq –––
for fb, tb, length_ft, code in LINES:
    r,x,c, r0,x0,c0 = CNDUCT[code]
    pp.create_line_from_parameters(
        net,
        from_bus=node(fb), to_bus=node(tb),
        length_km=length_ft*FT2KM,
        r_ohm_per_km=r,     x_ohm_per_km=x,
        c_nf_per_km=c,      r0_ohm_per_km=r0,
        x0_ohm_per_km=x0,   c0_nf_per_km=c0,
        max_i_ka=0.4, name=f"L{fb}-{tb}"
    )

# ––– transformer with zero-seq + excitation split –––
from pandapower.create import create_transformer_from_parameters
for hv, lv, sn, vn_hv, vn_lv in TX:
    create_transformer_from_parameters(
        net,
        hv_bus=SRC, lv_bus=node(lv),
        sn_mva=sn, vn_hv_kv=vn_hv, vn_lv_kv=vn_lv,
        vk_percent=8.0, vkr_percent=1.0,
        vk0_percent=8.0, vkr0_percent=1.0,
        mag0_percent=100.0, mag0_rx=1.0,
        si0_hv_partial=0.9,
        pfe_kw=5.0, i0_percent=0.2,
        vector_group="Dyn",
        tap_side="hv", tap_neutral=0, tap_pos=0,
        name="MAIN_TX"
    )

# ––– spot & distributed asymmetric loads –––
for b,pA,qA,pB,qB,pC,qC in SPOT:
    create_asymmetric_load(
        net, node(b),
        p_a_mw=pA/1000, q_a_mvar=qA/1000,
        p_b_mw=pB/1000, q_b_mvar=qB/1000,
        p_c_mw=pC/1000, q_c_mvar=qC/1000,
        name=f"Spot{b}"
    )
for b,pA,pB,pC,qA,qB,qC in DIST:
    create_asymmetric_load(
        net, node(b),
        p_a_mw=pA/1000, p_b_mw=pB/1000, p_c_mw=pC/1000,
        q_a_mvar=qA/1000, q_b_mvar=qB/1000, q_c_mvar=qC/1000,
        name=f"Dist{b}"
    )

# ––– capacitor banks as asymmetric sgens –––
for b,total_kvar in CAPS:
    q_ph = -total_kvar/3/1000
    create_asymmetric_sgen(
        net, node(b),
        p_a_mw=0, p_b_mw=0, p_c_mw=0,
        q_a_mvar=q_ph, q_b_mvar=q_ph, q_c_mvar=q_ph,
        name=f"Cap{b}"
    )

# ––– run and inspect 3-φ PF –––
from pandapower.pf.runpp_3ph import runpp_3ph
import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)

runpp_3ph(net, algorithm="nr",
          calculate_voltage_angles=True,
          max_iteration="auto",
          tolerance_mva=1e-6,
          calculate_current=True)

print("Converged:", net.converged)
res = net.res_bus_3ph.join(net.bus[["name"]])
print(res[["name","vm_a_pu","vm_b_pu","vm_c_pu",
           "va_a_degree","va_b_degree","va_c_degree"]])
import pickle

with open("D:\Hannaan\FedLoRa-RL\ieee34_feeder.pkl", "wb") as f:
    pickle.dump(net, f)
print("✅  feeder saved to D:\Hannaan\FedLoRa-RL\ieee34_feeder.pkl")